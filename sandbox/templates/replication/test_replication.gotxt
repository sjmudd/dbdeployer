#!{{.ShellPath}}
{{.Copyright}}
# Generated by dbdeployer {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
SBDIR={{.SandboxDir}}
cd "$SBDIR"

if [ -x ./{{.MasterAbbr}} ]
then
    MASTER=./{{.MasterAbbr}}
elif [ -x ./n1 ]
then
    MASTER=./n1
else
    echo "# No {{.MasterLabel}} found"
    exit 1
fi
$MASTER -e 'CREATE DATABASE IF NOT EXISTS test'
$MASTER test -e 'DROP TABLE IF EXISTS t1'
$MASTER test -e 'CREATE TABLE t1 (i int not null primary key, msg varchar(50), d date, t time, dt datetime, ts timestamp)'
#$MASTER test -e "insert into t1 values (1, 'test sandbox 1', '2015-07-16', '11:23:40','2015-07-17 12:34:50', null)"
#$MASTER test -e "insert into t1 values (2, 'test sandbox 2', '2015-07-17', '11:23:41','2015-07-17 12:34:51', null)"
for N in $(seq -f '%02.0f' 1 20)
do
    #echo "$MASTER test -e \"insert into t1 values ($N, 'test sandbox $N', '2015-07-$N', '11:23:$N','2015-07-17 12:34:$N', null)\""
    $MASTER test -e "INSERT INTO t1 VALUES ($N, 'test sandbox $N', '2015-07-$N', '11:23:$N','2015-07-17 12:34:$N', null)"
done
sleep 0.5
MASTER_RECS=$($MASTER -BN -e 'SELECT COUNT(*) FROM test.t1')

master_status=master_status$$
slave_status=slave_status$$
$MASTER -e '{{.ShowMasterStatusCmd}}\G' > $master_status
master_binlog=$(grep 'File:' $master_status | awk '{print $2}' )
master_pos=$(grep 'Position:' $master_status | awk '{print $2}' )
echo "# {{.MasterLabel}} log: $master_binlog - Position: $master_pos - Rows: $MASTER_RECS"
rm -f $master_status

FAILED=0
PASSED=0

function ok_equal
{
    fact="$1"
    expected="$2"
    msg="$3"
    if [ "$fact" == "$expected" ]
    then
        echo -n "ok"
        PASSED=$(($PASSED+1))
    else
        echo -n "not ok - (expected: <$expected> found: <$fact>) "
        FAILED=$(($FAILED+1))
    fi
    echo " - $msg"
}

function test_summary
{
    TESTS=$(($PASSED+$FAILED))
    if [ -n "$TAP_TEST" ]
    then
        echo "1..$TESTS"
    else
        PERCENT_PASSED=$(($PASSED/$TESTS*100))
        PERCENT_FAILED=$(($FAILED/$TESTS*100))
        printf "# Tests : %5d\n" $TESTS
    fi
    exit_code=0
	fail_label="failed"
	pass_label="PASSED"
    if [ "$FAILED" != "0" ]
    then
        fail_label="FAILED"
pass_label="passed"
        exit_code=1
    fi
    printf "# $fail_label: %5d (%5.1f%%)\n" $FAILED $PERCENT_FAILED
    printf "# $pass_label: %5d (%5.1f%%)\n" $PASSED $PERCENT_PASSED
    echo "# exit code: $exit_code"
    exit $exit_code
}

for SLAVE_N in 1 2 3 4 5 6 7 8 9
do
    N=$(($SLAVE_N+1))
    unset SLAVE
    if [ -x ./{{.SlaveAbbr}}$SLAVE_N ]
    then
        SLAVE=./{{.SlaveAbbr}}$SLAVE_N
    elif [ -x ./n$N ]
    then
        SLAVE=./n$N
    fi
    if [ -n "$SLAVE" ]
    then
        echo "# Testing {{.SlaveLabel}} #$SLAVE_N"
        if [ -f initialize_nodes ]
        then
            sleep 3
        else
            S_READY=$($SLAVE -BN -e "SELECT {{.MASTER_POS_WAIT}}('$master_binlog', $master_pos, 60)")
            # master_pos_wait can return 0 or a positive number for successful replication
            # Any result that is not NULL or -1 is acceptable
            if [ "$S_READY" != "-1" -a "$S_READY" != "NULL" ]
            then
                S_READY=0
            fi
            ok_equal $S_READY 0 "{{.SlaveLabel}} #$SLAVE_N acknowledged reception of transactions from {{.MasterLabel}}"
        fi
if [ -f initialize_{{.SlaveLabel}}s ]
then
	$SLAVE -e '{{.ShowSlaveStatusCmd}}\G' > $slave_status
	IO_RUNNING=$(grep -w {{.Slave_IO_Running}} $slave_status | awk '{print $2}')
	ok_equal $IO_RUNNING Yes "{{.SlaveLabel}} #$SLAVE_N IO thread is running"
	SQL_RUNNING=$(grep -w {{Slave_SQL_Running}} $slave_status | awk '{print $2}')
	ok_equal $SQL_RUNNING Yes "{{.SlaveLabel}} #$SLAVE_N SQL thread is running"
	rm -f $slave_status
fi
        [ $FAILED == 0 ] || exit 1

        T1_EXISTS=$($SLAVE -BN -e 'SHOW TABLES FROM test LIKE "t1"')
        ok_equal $T1_EXISTS t1 "Table t1 found on {{.SlaveLabel}} #$SLAVE_N"
        T1_RECS=$($SLAVE -BN -e 'SELECT COUNT(*) from test.t1')
        ok_equal $T1_RECS $MASTER_RECS "Table t1 has $MASTER_RECS rows on #$SLAVE_N"
    fi
done
test_summary
