#!{{.ShellPath}}
{{.Copyright}}
# Generated by dbdeployer {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
source {{.SandboxDir}}/sb_include
export LD_LIBRARY_PATH=$CLIENT_LD_LIBRARY_PATH
cd "$SBDIR"

fail=0
pass=0
TIMEOUT=180
expected_port={{.Port}}
expected_version=$(echo "{{.Version}}" | tr -d 'A-Z,a-z,_-')


if [ -f sbdescription.json ]
then
    sb_single=$(grep 'type' sbdescription.json| grep 'single')
fi

function test_query {
    user=$1
    query="$2"
    expected=$3
    ./use -BN -u $user -e "$query" > /dev/null 2>&1
    exit_code=$?
    if [ "$exit_code" == "$expected" ]
    then
        msg="was successful"
        if [ "$expected" != "0" ]
        then
            msg="failed as expected"
        fi
        echo "ok - query $msg for user $user: '$query'"
        pass=$((pass+1))
    else
        echo "not ok - query failed for user $user: '$query'"
        fail=$((fail+1))
    fi
}

if [ -n "$CHECK_LOGS" ]
then
    log_has_errors=$(grep ERROR $SBDIR/data/msandbox.err)
    if [ -z "$log_has_errors" ]
    then
        echo "ok - no errors in log"
        pass=$((pass+1))
    else
        echo "not ok - errors found in log"
        fail=$((fail+1))
    fi
fi

if [ -z "$(is_running)" ]
then
    echo "not ok - server stopped"
    fail=$((fail+1))
else
    version=$(./use -BN -e "SELECT VERSION()")
    port=$(./use -BN -e "SHOW VARIABLES LIKE 'port'" | awk '{print $2}')
    if [ -n "$version" ]
    then
        echo "ok - version '$version'"
        pass=$((pass+1))
    else
        echo "not ok - no version detected"
        fail=$((fail+1))
    fi
    if [ -n "$port" ]
    then
        echo "ok - port detected: $port"
        pass=$((pass+1))
    else
        echo "not ok - no port detected"
        fail=$((fail+1))
    fi
    
    if [ -n "$( echo $version| grep $expected_version)" ]
    then
        echo "ok - version is $version as expected"
        pass=$((pass+1))
    else
        echo "not ok - version detected ($version) but expected was $expected_version"
        fail=$((fail+1))
    fi
    if [ "$port" == "$expected_port" ]
    then
        echo "ok - port is $port as expected"
        pass=$((pass+1))
    else
        echo "not ok - port detected ($port) but expected was $expected_port"
        fail=$((fail+1))
    fi
    if [[ $MYSQL_VERSION_MAJOR -ge 5 ]]
    then
        ro_query='USE mysql; SELECT COUNT(*) FROM information_schema.tables WHERE table_schema=schema()'
    else
        ro_query='SHOW TABLES FROM mysql'
    fi
    create_query='CREATE TABLE IF NOT EXISTS test.txyz(i int)'
    drop_query='DROP TABLE IF EXISTS test.txyz'
    test_query msandbox_ro 'SELECT 1' 0
    test_query msandbox_rw 'SELECT 1' 0
    test_query msandbox_ro "$ro_query" 0
    test_query msandbox_rw "$ro_query" 0
    if [ -n "$sb_single" ]
    then
        test_query msandbox_ro "$create_query" 1
        test_query msandbox_rw "$create_query" 0
        test_query msandbox_rw "$drop_query" 0
    fi
fi
fail_label="fail"
pass_label="PASS"
exit_code=0
tests=$(($pass+$fail))
if [ "$fail" != "0" ]
then
    fail_label="FAIL"
    pass_label="pass"
    exit_code=1
fi
printf "# Tests : %5d\n" $tests
printf "# $pass_label  : %5d \n" $pass
printf "# $fail_label  : %5d \n" $fail
exit $exit_code
