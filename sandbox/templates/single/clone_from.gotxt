#!{{.ShellPath}}
{{.Copyright}}
# Generated by dbdeployer {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
source {{.SandboxDir}}/sb_include
cd "$SBDIR"

donor_sandbox=$1
if [ -z "$donor_sandbox" ]
then
    echo "donor sandbox name expected"
    exit 1
fi
if [ ! -d $SANDBOX_HOME/$donor_sandbox ]
then
    echo "Sandbox $SANDBOX_HOME/$donor_sandbox not found"
    exit 1
fi

[ -z "$MASTER_LABEL" ] && MASTER_LABEL=master
[ -z "$NODE_LABEL" ] && NODE_LABEL=node

# Using standard directory node names to find connection info.
# This may fail if directory names have been customized
# Use environment variables MASTER_LABEL and NODE_LABEL if directory names have changed
if [ -f $SANDBOX_HOME/$donor_sandbox/initialize_slaves ]
then
    donor_sandbox="$donor_sandbox/$MASTER_LABEL"
elif [ -f $SANDBOX_HOME/$donor_sandbox/use_all ]
then
    donor_sandbox="$donor_sandbox/${NODE_LABEL}1"
fi

donor_use=$SANDBOX_HOME/$donor_sandbox/use
donor_metadata=$SANDBOX_HOME/$donor_sandbox/metadata
if [ ! -x $donor_use ]
then
    echo "Executable $donor_use not found"
    exit 1
fi
if [ ! -x $donor_metadata ]
then
    echo "Executable $donor_metadata not found"
    exit 1
fi

donor_os=$($donor_use -BN -e 'SELECT @@version_compile_os')
recipient_os=$(./use -BN -e 'SELECT @@version_compile_os')
if [ "$donor_os" != "$recipient_os" ]
then
    echo "Donor OS ($donor_os) and recipient OS ($recipient_os) are different" 
    echo "A cloning pre-requisite is that both donor and recipient use the same OS"
    exit 1
fi

donor_version=$($donor_metadata version)
recipient_version=$(./metadata version)
if [ "$donor_version" != "$recipient_version" ]
then
    echo "Donor version ($donor_version) and recipient version ($recipient_version) are different" 
    echo "A cloning pre-requisite is that both donor and recipient use the same version"
    exit 1
fi

clone_connection=$SANDBOX_HOME/$donor_sandbox/clone_connection.sql

if [ ! -f $clone_connection ]
then
    echo "File $clone_connection not found"
    exit 1
fi

clone_installed=$(./use -BN -e 'SHOW PLUGINS' | grep clone)
if [ -z "$clone_installed" ]
then
    echo "Installing clone plugin in recipient sandbox"
    ./use -e "INSTALL PLUGIN clone SONAME 'mysql_clone.so'"
fi

donor_clone_installed=$($donor_use -BN -e 'SHOW PLUGINS' | grep clone)
if [ -z "$donor_clone_installed" ]
then
    echo "Installing clone plugin in donor sandbox"
    $donor_use -e "INSTALL PLUGIN clone SONAME 'mysql_clone.so'"
fi

echo "Cloning from $donor_sandbox"
./use < $clone_connection
if [ "$?" != "0" ]
then
    echo "error during clone procedure"
    exit 1
fi

#
# Taking username and password from the donor sandbox
#
source_dir=$SANDBOX_HOME/$donor_sandbox
user=$(grep ^user $source_dir/my.sandbox.cnf| head -n 1 | awk '{print $3}' )
password=$(grep ^password $source_dir/my.sandbox.cnf| head -n 1 | awk '{print $3}' )

dest_user_line=$(grep ^user $SBDIR/my.sandbox.cnf | head -n 1)
dest_password_line=$(grep ^password $SBDIR/my.sandbox.cnf | head -n 1)

sed -e "s/$dest_user_line/user=$user/" < $SBDIR/my.sandbox.cnf | sed -e "s/$dest_password_line/password=$password/" > new_my.sandbox.cnf
mv my.sandbox.cnf my.sandbox.cnf.old
mv new_my.sandbox.cnf my.sandbox.cnf

echo "Giving time to cloned server to restart"
timeout=30
elapsed=0
connected=
sleep 3
while [ -z "$connected" ]
do
    response=$(./use -BN -e 'SELECT 1234')
    if [ "$response" == "1234" ]
    then
        connected=1
    else
        sleep 1
        elapsed=$((elapsed+1))
        echo -n "."
        if [[ $elapsed -ge $timeout ]]
        then
            echo "Connection from $donor_sandbox failed after cloning"
            echo "WARNING: this sandbox has the username and password of the donor sandbox"
            exit 1
        fi
    fi
done
echo ""

binlog_file=$(./use -BN -e 'SELECT BINLOG_FILE FROM performance_schema.clone_status')
binlog_position=$(./use -BN -e 'SELECT BINLOG_POSITION FROM performance_schema.clone_status')
if [ -z "$binlog_file" -o -z "$binlog_position" ]
then
    echo "Master binary log info not found after clone"  
    exit 1
fi
echo "{{.MASTER_LOG_FILE}}=\"$binlog_file\", {{.MASTER_LOG_POS}}=$binlog_position" > clone_replication.sql
