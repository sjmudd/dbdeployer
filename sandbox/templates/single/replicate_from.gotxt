#!{{.ShellPath}}
{{.Copyright}}
# Generated by dbdeployer {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
source {{.SandboxDir}}/sb_include

cd "$SBDIR"

active_replication=$SBDIR/active_replication
remove_replication=$SBDIR/remove_replication

master_sandbox=$1
if [ -z "$master_sandbox" ]
then
    echo "syntax $0 master_sandbox"
    exit 1
fi

with_clone=$2


if [ -f $active_replication ]
then
    echo "There is already an active replication for this sandbox"
    cat $active_replication
    echo ""
    echo "Run $remove_replication to remove the existing one."
    exit 1
fi

master_path=$SANDBOX_HOME/$master_sandbox
if [ ! -d $master_path ]
then
    echo "master sandbox $master_path not found"
    exit 1
fi

[ -z "$MASTER_LABEL" ] && MASTER_LABEL=master
[ -z "$NODE_LABEL" ] && NODE_LABEL=node

# Using standard directory node names to find connection info.
# This may fail if directory names have been customized
# Use environment variables MASTER_LABEL and NODE_LABEL if directory names have changed
if [ -f $master_path/initialize_slaves ]
then
    master_path="$master_path/$MASTER_LABEL"
elif [ -f $master_path/use_all ]
then
    master_path="$master_path/${NODE_LABEL}1"
fi

master_connection=$master_path/connection.sql
master_metadata=$master_path/metadata
master_use_script=$master_path/use

if [ ! -f $master_connection ]
then
    echo "master connection file $master_connection not found"
    exit 1
fi
if [ ! -x $master_metadata ]
then
    echo "executable master metadata $master_metadata not found"
    exit 1
fi

if [ ! -x $master_use_script ]
then
    echo "executable $master_use_script not found"
    exit 1
fi

master_server_id=$($master_use_script -BN -e 'SELECT @@server_id')
slave_server_id=$($SBDIR/use -BN -e 'SELECT @@server_id')

if [ "$master_server_id" == "$slave_server_id" ]
then
    echo "Both the intended master and slave have the same server_id"
    echo "To avoid this clash, deploy again either the master or the slave sandbox,"
    echo "using the option '--port-as-server-id'"
    echo "and then try again the operation."
    exit 1
fi


can_use_gtid=
using_gtid=
master_sortable_version=$($master_metadata sversion)
slave_sortable_version=$($SBDIR/metadata sversion)
minimum_version_gtid="005006008"
if [[ "v$master_sortable_version" > "v$minimum_version_gtid" ]]
then
	if [[ "v$slave_sortable_version" > "v$minimum_version_gtid" ]]
	then
  	    can_use_gtid=1
  	fi
fi  
if [ -z "$master_sortable_version" -o -z "$slave_sortable_version" ]
then
    unset can_use_gtid
fi

if [ -n "$can_use_gtid" ]
then
    master_server_uuid=$($master_use_script -BN -e 'SELECT @@server_uuid')
    slave_server_uuid=$($SBDIR/use -BN -e 'SELECT @@server_uuid')

    if [ "$master_server_uuid" == "$slave_server_uuid" ]
    then
        echo "Both the intended master and slave have the same server_uuid"
        echo "To avoid this clash, deploy again either the master or the slave sandbox,"
        echo "using the option '--keep-server-uuid"
        echo "and then try again the operation."
        exit 1
    fi

    master_using_gtid=$($master_use_script -BN -e "SELECT @@gtid_mode"| grep '^ON$')
    slave_using_gtid=$($SBDIR/use -BN -e "SELECT @@gtid_mode"| grep '^ON$')
    if [ -n "$master_using_gtid" ]
    then
        if [ -n "$slave_using_gtid" ]
        then
            using_gtid=1
        else
            echo "Only one server is using GTID. Either both or none of them should have GTID enabled"
            exit 1
        fi  
    fi
fi

if [ "$with_clone" == "clone" ]
then
    if [ ! -x ./clone_from ]
    then
        echo "clone requested, but executable 'clone_from' not found"
        exit 1
    fi
    ./clone_from $master_sandbox
    if [ "$?" != "0" ] ; then exit 1 ; fi
fi


master_short_version=$($master_metadata short)
master_major=$($master_metadata major)
master_minor=$($master_metadata minor)
slave_major=$($SBDIR/metadata major)
slave_minor=$($SBDIR/metadata minor)

if [ -n "$using_gtid" ]
then
	if [ "$master_short_version" == "5.7" -o "$master_short_version" == "5.6" ]
    then
        echo "resetting master (needed in version < 8.0)"
        $master_use_script -e "reset master"
    fi
fi

master_status=/tmp/mstatus$$

$master_use_script -e 'show master status\G' > $master_status
binlog_file=$(grep File < $master_status | awk '{print $2}')
binlog_pos=$(grep Position < $master_status | awk '{print $2}')
rm -f $master_status

if [ -z "$binlog_file" ]
then
    echo "No binlog information found in $master_path"
    exit 1
fi

if [ -z "$binlog_pos" ]
then
    echo "No binlog position found in $master_path"
    exit 1
fi

replication_ok=""
replication_error=""

# e.g master 5 and slave 8
if [[ $master_major -lt $slave_major ]]
then
    replication_ok=yes
    replication_error=""
fi

# e.g. master 8 and slave 5
if [[ $master_major -gt $slave_major ]]
then
    replication_ok=no
    replication_error="Master major version should be lower than slave version (or equal)"
fi

# e.g. master 5.6 with slave 5.7 or same version for both
if [[ $master_major -eq $slave_major ]]
then
    if [[ $master_minor -le $slave_minor ]]
    then
        replication_ok=yes
        replication_error=""
    else
        # e.g. master 5.7 with slave 5.6
        replication_ok=no
        replication_error="Master minor version should be lower than slave version (or equal)"
    fi
fi

if [ "$replication_ok" != "yes" ]
then
    echo $replication_error
    exit 1
fi

if [ -n "$using_gtid" ]
then
    connection_string=$(cat $master_connection ; echo -n ", master_auto_position=1")
else 
    connection_string=$(cat $master_connection ; echo -n ', master_log_file="'$binlog_file'", master_log_pos='$binlog_pos )
    if [ -f clone_replication.sql ]
    then
        connection_string=$(cat $master_connection ; echo -n ", " ; cat clone_replication.sql)
    fi
fi

# If master is 8.0, the slave must be at least 8.0
if [ "$master_short_version" == "8.0" ]
then
    connection_string="$connection_string, {{.GET_MASTER_PUBLIC_KEY}}=1"
fi

echo "Connecting to $master_path"

$SBDIR/use -v -e "$connection_string"
if [ "$?" != "0" ] ; then exit 1 ; fi

if [ -f clone_replication.sql ]
then
    rm -f clone_replication.sql
fi
$SBDIR/use -v -e '{{.StartSlaveCmd}}'
$SBDIR/use -v -e '{{.ShowSlaveStatusCmd}}\G' | grep "\(Running:\|{{.Master_Log_Pos}}\|\<{{.Master_Log_File}}\|Retrieved\|Executed\|Auto_Position\)"
date > $active_replication
echo "Connected to $master_path" >> $active_replication
echo "#!{{.ShellPath}}" > $remove_replication
echo "$SBDIR/use -v -e '{{.StopSlaveCmd}}; {{.ResetSlaveCmd}}'" >> $remove_replication
echo "rm -f $active_replication" >> $remove_replication
chmod +x $remove_replication

